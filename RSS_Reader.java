import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Henrique Painhas
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int channelTitle = getChildElement(channel, "title");
        int channelLink = getChildElement(channel, "link");
        int channelDescription = getChildElement(channel, "description");

        out.println("<html>");
        out.println("<head>");
        out.println("<title>");
        if (channel.child(channelTitle).child(0).label().equals("")) {
            out.println("Empty Title");

        } else {
            out.println(channel.child(channelTitle).child(0).label());
        }
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href=\""
                + channel.child(channelLink).child(0).label() + "\">"
                + channel.child(channelTitle).child(0).label() + "</a></h1>");
        if (channel.child(channelDescription).child(0).label().equals("")) {
            out.println("No description");
        } else {
            out.println(
                    "<p>" + channel.child(channelDescription).child(0).label()
                            + "</p>");
        }
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int numOfChildren = xml.numberOfChildren();

        for (int i = 0; i < numOfChildren; i++) {
            if (xml.child(i).label().equals(tag)) {
                return i;
            }
        }
        return -1;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int pubDate = getChildElement(item, "pubDate");
        int source = getChildElement(item, "source");
        int title = getChildElement(item, "title");
        int link = getChildElement(item, "link");
        int description = getChildElement(item, "description");

        if (pubDate != -1) {
            if (item.child(pubDate).label().equals("pubDate")) {
                out.println("<tr>");
                out.println("<td>" + item.child(pubDate).child(0).label()
                        + "</td>");
            }
        } else {
            out.println("<td>No date available</td>");
        }

        if (source != -1) {
            if (item.child(source).label().equals("source")) {
                out.println("<td><a href=\""
                        + item.child(source).attributeValue("url") + "\">"
                        + item.child(source).child(0).label() + "</a></td>");
            }
        } else {
            out.println("<td>No source available</td>");
        }

        if (title != -1) {
            if (item.child(title).label().equals("title")) {
                if (!item.child(title).child(0).label().equals("")) {
                    out.println("<td><a href=\""
                            + item.child(link).child(0).label() + "\">"
                            + item.child(title).child(0).label() + "</a></td>");
                    out.println("</tr>");
                }
            }
        } else {
            if (item.child(description).label().equals("description")) {
                if (item.child(description).child(0).label().equals("")) {
                    out.println("No title available");
                } else {
                    out.println(
                            "<td>" + item.child(description).child(0).label()
                                    + "</td>");
                    out.println("</tr>");
                }
            }
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the URL of an RSS 2.0 feed: ");
        XMLTree xml = new XMLTree1(in.nextLine());

        out.print("Enter the output file name including the html extension: ");
        String fileName = in.nextLine();

        out.println();

        XMLTree channel = xml.child(0);

        SimpleWriter html = new SimpleWriter1L(fileName);

        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {

            outputHeader(channel, html);

            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")
                        && channel.child(i).isTag()) {
                    XMLTree item = channel.child(i);
                    processItem(item, html);
                }
            }

            outputFooter(html);
        }

        in.close();
        out.close();
        html.close();
    }
}
